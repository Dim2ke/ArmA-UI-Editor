using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SQF.ClassParser;

COMPILER CONFIGFILE
    SQF.ClassParser.ConfigField MainField = null;
    
    StringList KeysAdded = new StringList();
    
    public void ApplyRemovedFields()
    {
        var curKeys = this.MainField.GetEnumeratorDeep();
        var patchKeys = this.KeysAdded;
        var missingKeys = curKeys.Except(patchKeys);
        foreach (var key in missingKeys)
        {
#if DEBUG
                if (!this.MainField.TreeRoot.Contains(key))
                    System.Diagnostics.Debugger.Break();
#endif
            var field = this.MainField.TreeRoot[key];
            field.Parent.RemoveKey(field.Name);
        }
    }
    
    public string KeyToFind = string.Empty;

    CHARACTERS
		DIGIT = "0123456789".
        HEXDIGIT = "0123456789ABCDEFabcdef".
		CHARACTER = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".
        ACHARACTER = "!|§$%&/*+-()=?`´#~ß}][{-_".
		OTHER = ANY - '/' - '*'. 
		STRINGCHARS = ANY - '\n' - '\r' - '"'.

	TOKENS
		T_SCALAR = [ '-' ] DIGIT { DIGIT } [ '.' DIGIT { DIGIT } ].
        T_HEX = ("0x" | "0X") HEXDIGIT { HEXDIGIT }.
		T_STRING = '"' { STRINGCHARS | "\"\""} '"'.
        T_STRINGTABLESTRING = '$' { CHARACTER | '_' | DIGIT }.
		T_IDENT = ( CHARACTER | '_' ) { CHARACTER | '_' | DIGIT }.
		
	COMMENTS FROM "/*" TO "*/" NESTED
	COMMENTS FROM "//" TO '\n'
	IGNORE '\t' + '\r' + '\n'
		
	PRODUCTIONS
		CONFIGFILE =
            (.
                StringList list = new StringList();
            .)
            CONFIG<list>
            {
                CONFIG<list>
            }
		.
        CONFIG<StringList list> (. ConfigField thisField; .) =
            "class"
            T_IDENT (.
                list.Add(t.val);
                thisField = this.MainField.GetKey(string.Join("/", list.ToArray()), ConfigField.KeyMode.CreateNew);
                if (!thisField.IsClass)
                {
                    thisField.ToClass();
                }
                thisField.Name = t.val;
            .)
            [
                ':'
                T_IDENT (. thisField.ConfigParentName = t.val; .)
            ]
            [
                '{' (. var beginIndex = la.charPos; .)
                {
                    FIELD<list>
                    |
                    CONFIG<list>
                }
                (. if(!string.IsNullOrWhiteSpace(KeyToFind) && string.Concat("/", string.Join("/", list.ToArray())).Equals(KeyToFind, StringComparison.InvariantCultureIgnoreCase)) throw new LazyException(beginIndex, t.charPos + t.val.Length); .)
                '}'
            ]
            ';'
            (.
                KeysAdded.Add(string.Join("/", this.MainField.Key, string.Join("/", list.ToArray())).Replace("//", "/"));
                list.Remove(list.Last());
            .)
        .
        FIELD<StringList list> (. ConfigField thisField; .) =
            T_IDENT (.
                list.Add(t.val);
                thisField = this.MainField.GetKey(string.Join("/", list.ToArray()), ConfigField.KeyMode.CreateNew);
                if (thisField.IsClass)
                {
                    thisField.ToField();
                }
                thisField.Name = t.val;
                KeysAdded.Add(string.Join("/", this.MainField.Key, string.Join("/", list.ToArray())).Replace("//", "/"));
            .)
            [
                '['
                ']'
            ]
            '='
            (
                (. object tmp; var beginIndex = la.charPos; .)
                (
                    ARRAY<out tmp> (. thisField.Array = (object[])tmp; .)
                    |
                    SCALAR<out tmp> (. thisField.Number = (double)tmp; .)
                    |
                    STRING<out tmp> (. thisField.String = (string)tmp; .)
                    |
                    BOOLEAN<out tmp> (. thisField.Boolean = (bool)tmp; .)
                    |
                    ANY (. tmp = new StringList(); (tmp as StringList).Add(t.val); .)
                )
                [
                    ANY (. tmp = new StringList(); (tmp as StringList).Add(t.val); .)
                    {
                        ANY (. tmp = new StringList(); (tmp as StringList).Add(t.val); .)
                    }
                    (. thisField.String = string.Join(" ", (tmp as StringList).ToArray()); .)
                ]
                (. if(!string.IsNullOrWhiteSpace(KeyToFind) && string.Concat("/", string.Join("/", list.ToArray())).Equals(KeyToFind, StringComparison.InvariantCultureIgnoreCase)) throw new LazyException(beginIndex, t.charPos + t.val.Length); .)
            )
            ';'
            (. list.Remove(list.Last()); .)
        .
        SCALAR<out object v> (. v = 0; .) =
            T_SCALAR (. v = Double.Parse(t.val, System.Globalization.CultureInfo.InvariantCulture); .)
            |
            T_HEX (. v = (double)Convert.ToInt32(t.val.Substring(2), 16); .)
        .
        STRING<out object v> (. v = string.Empty; .) = 
            (
                T_STRING (. v = t.val.FromSqfString(); .)
                |
                T_STRINGTABLESTRING (. v = t.val.Substring(1); .)
            )
        .
        BOOLEAN<out object v> (. v = false; .) =
            (
                "true" (. v = true; .)
                |
                "false"
            )
        .
        ARRAY<out object v> (. List<object> objectList = new List<object>(); object tmp; .) = 
            '{'
            (
                SCALAR<out tmp> (. objectList.Add(tmp); .)
                |
                STRING<out tmp> (. objectList.Add(tmp); .)
                |
                BOOLEAN<out tmp> (. objectList.Add(tmp); .)
            )
            {
                ','
                (
                    SCALAR<out tmp> (. objectList.Add(tmp); .)
                    |
                    STRING<out tmp> (. objectList.Add(tmp); .)
                    |
                    BOOLEAN<out tmp> (. objectList.Add(tmp); .)
                )
            }
            '}'
            (. v = objectList.ToArray(); .)
        .
END CONFIGFILE.