using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SQF.ClassParser;

COMPILER CONFIGFILE
	CHARACTERS
		DIGIT = "0123456789".
        HEXDIGIT = "0123456789ABCDEFabcdef".
		CHARACTER = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".
        ACHARACTER = "!|§$%&/*+-()=?`´#~ß}][{-_".
		OTHER = ANY - '/' - '*'. 
		STRINGCHARS = ANY - '\n' - '\r' - '"'.

	TOKENS
		T_SCALAR = [ '-' ] DIGIT { DIGIT } [ '.' DIGIT { DIGIT } ].
        T_HEX = ("0x" | "0X") HEXDIGIT { HEXDIGIT }.
		T_STRING = '"' { STRINGCHARS | "\"\""} '"'.
        T_STRINGTABLESTRING = '$' { CHARACTER | '_' | DIGIT }.
		T_IDENT = ( CHARACTER | '_' ) { CHARACTER | '_' | DIGIT }.
		
	COMMENTS FROM "/*" TO "*/" NESTED
	COMMENTS FROM "//" TO '\n'
	IGNORE '\t' + '\r' + '\n'
		
	PRODUCTIONS
		CONFIGFILE =
            (.
                StringList list = new StringList();
                this.MainField.ThisBuffer.Lock();
            .)
            CONFIG<list>
            {
                CONFIG<list>
            }
            (. this.MainField.ThisBuffer.Unlock(); .)
		.
        CONFIG<StringList list> (. ConfigField thisField; ConfigField.Mark mark; .) =
            "class"
            T_IDENT (.
                list.Add(t.val);
                thisField = this.MainField.GetKey(string.Join("/", list.ToArray()), true);
                try
                {
                    thisField.ToClass();
                }
                catch
                {
                }
                thisField.Name = t.val;
                mark = thisField.Marks[(int)ConfigField.MarkOffsets.front]; mark.Length = 1 + t.charPos - this.lastPos; thisField.Marks[(int)ConfigField.MarkOffsets.front] = mark;
                mark = thisField.Marks[(int)ConfigField.MarkOffsets.name]; mark.Length = t.val.Length; thisField.Marks[(int)ConfigField.MarkOffsets.name] = mark;
                this.lastPos = t.charPos + t.val.Length;
            .)
            [
                ':'
                T_IDENT (.
                    thisField.ConfigParentName = t.val;
                    mark = thisField.Marks[(int)ConfigField.MarkOffsets.name_parent]; mark.Length = 1 + t.charPos - this.lastPos; thisField.Marks[(int)ConfigField.MarkOffsets.name_parent] = mark;
                    mark = thisField.Marks[(int)ConfigField.MarkOffsets.parent]; mark.Length = t.val.Length; thisField.Marks[(int)ConfigField.MarkOffsets.parent] = mark;
                    this.lastPos = t.charPos + t.val.Length;
                .)
            ]
            [
                '{' (. mark = thisField.Marks[(int)ConfigField.MarkOffsets.parent_value]; mark.Length = 1 + t.charPos - this.lastPos; int tmpoff = this.lastPos = t.charPos; bool isFirst = true; thisField.Marks[(int)ConfigField.MarkOffsets.parent_value] = mark; .)
                {
                    FIELD<list>
                    |
                    CONFIG<list>
                }
                (. mark = thisField.Marks[(int)ConfigField.MarkOffsets.value]; mark.Length = 1 + t.charPos - tmpoff; this.lastPos = t.charPos; thisField.Marks[(int)ConfigField.MarkOffsets.value] = mark; .)
                '}'
            ]
            ';' (. mark = thisField.Marks[(int)ConfigField.MarkOffsets.blockclose]; mark.Length = 1 + t.charPos - this.lastPos; this.lastPos = t.charPos; thisField.Marks[(int)ConfigField.MarkOffsets.blockclose] = mark; .)
            (. list.Remove(list.Last()); .)
        .
        FIELD<StringList list> (. ConfigField thisField; ConfigField.Mark mark; .) =
            T_IDENT (.
                list.Add(t.val);
                thisField = this.MainField.GetKey(string.Join("/", list.ToArray()), true);
                try
                {
                    thisField.ToField();
                }
                catch
                {
                }
                thisField.Name = t.val;
                mark = thisField.Marks[(int)ConfigField.MarkOffsets.front]; mark.Length = 1 + t.charPos - this.lastPos; thisField.Marks[(int)ConfigField.MarkOffsets.front] = mark;
                mark = thisField.Marks[(int)ConfigField.MarkOffsets.name]; mark.Length = t.val.Length; thisField.Marks[(int)ConfigField.MarkOffsets.name] = mark;
                this.lastPos = t.charPos + t.val.Length;
            .)
            [
                '['
                ']'
            ]
            '=' (. mark = thisField.Marks[(int)ConfigField.MarkOffsets.parent_value]; mark.Length = 1 + t.charPos - this.lastPos; int tmpoff = this.lastPos = t.charPos; object tmp; thisField.Marks[(int)ConfigField.MarkOffsets.parent_value] = mark; .)
            (
                (
                    ARRAY<out tmp> (. thisField.Array = (object[])tmp; .)
                    |
                    SCALAR<out tmp> (. thisField.Number = (double)tmp; .)
                    |
                    STRING<out tmp> (. thisField.String = (string)tmp; .)
                    |
                    BOOLEAN<out tmp> (. thisField.Boolean = (bool)tmp; .)
                    |
                    ANY (. tmp = new StringList(); (tmp as StringList).Add(t.val); .)
                )
                [
                    ANY (. tmp = new StringList(); (tmp as StringList).Add(t.val); .)
                    {
                        ANY (. tmp = new StringList(); (tmp as StringList).Add(t.val); .)
                    }
                    (. thisField.String = string.Join(" ", (tmp as StringList).ToArray()); .)
                ]
                (. mark = thisField.Marks[(int)ConfigField.MarkOffsets.value]; mark.Length = 1 + t.charPos - tmpoff; this.lastPos = t.charPos; thisField.Marks[(int)ConfigField.MarkOffsets.value] = mark; .)
            )
            ';'(. mark = thisField.Marks[(int)ConfigField.MarkOffsets.blockclose]; mark.Length = 1 + t.charPos - this.lastPos; this.lastPos = t.charPos; thisField.Marks[(int)ConfigField.MarkOffsets.blockclose] = mark; .)
            (. list.Remove(list.Last()); .)
        .
        SCALAR<out object v> (. v = 0; .) =
            T_SCALAR (. v = Double.Parse(t.val, System.Globalization.CultureInfo.InvariantCulture); .)
            |
            T_HEX (. v = (double)Convert.ToInt32(t.val.Substring(2), 16); .)
        .
        STRING<out object v> (. v = string.Empty; .) = 
            (
                T_STRING (. v = t.val.FromSqfString(); .)
                |
                T_STRINGTABLESTRING (. v = t.val.Substring(1); .)
            )
        .
        BOOLEAN<out object v> (. v = false; .) =
            (
                "true" (. v = true; .)
                |
                "false"
            )
        .
        ARRAY<out object v> (. List<object> objectList = new List<object>(); object tmp; .) = 
            '{'
            (
                SCALAR<out tmp> (. objectList.Add(tmp); .)
                |
                STRING<out tmp> (. objectList.Add(tmp); .)
                |
                BOOLEAN<out tmp> (. objectList.Add(tmp); .)
            )
            {
                ','
                (
                    SCALAR<out tmp> (. objectList.Add(tmp); .)
                    |
                    STRING<out tmp> (. objectList.Add(tmp); .)
                    |
                    BOOLEAN<out tmp> (. objectList.Add(tmp); .)
                )
            }
            '}'
            (. v = objectList.ToArray(); .)
        .
END CONFIGFILE.